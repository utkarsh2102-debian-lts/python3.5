Origin: https://github.com/python/cpython/commit/063eba280a11d3c9a5dd9ee5abe4de640907951b
Last-Update: 2020-07-09
Reviewed-by: Sylvain Beucler <beuc@debian.org>

From 063eba280a11d3c9a5dd9ee5abe4de640907951b Mon Sep 17 00:00:00 2001
From: Abhilash Raj <maxking@users.noreply.github.com>
Date: Fri, 6 Sep 2019 22:24:05 -0700
Subject: [PATCH] [3.5] bpo-34155: Dont parse domains containing @ (GH-13079)
 (#15317)

https://bugs.python.org/issue34155
(cherry picked from commit 8cb65d1381b027f0b09ee36bfed7f35bb4dec9a9)

Co-authored-by: jpic <jpic@users.noreply.github.com>
---
 Lib/email/_header_value_parser.py                  |  2 ++
 Lib/email/_parseaddr.py                            | 11 ++++++++++-
 Lib/test/test_email/test__header_value_parser.py   | 10 ++++++++++
 Lib/test/test_email/test_email.py                  | 14 ++++++++++++++
 .../2019-05-04-13-33-37.bpo-34155.MJll68.rst       |  1 +
 5 files changed, 37 insertions(+), 1 deletion(-)
 create mode 100644 Misc/NEWS.d/next/Security/2019-05-04-13-33-37.bpo-34155.MJll68.rst

Index: python3.5-3.5.3/Lib/email/_header_value_parser.py
===================================================================
--- python3.5-3.5.3.orig/Lib/email/_header_value_parser.py
+++ python3.5-3.5.3/Lib/email/_header_value_parser.py
@@ -1966,6 +1966,8 @@ def get_domain(value):
         token, value = get_dot_atom(value)
     except errors.HeaderParseError:
         token, value = get_atom(value)
+    if value and value[0] == '@':
+        raise errors.HeaderParseError('Invalid Domain')
     if leader is not None:
         token[:0] = [leader]
     domain.append(token)
Index: python3.5-3.5.3/Lib/email/_parseaddr.py
===================================================================
--- python3.5-3.5.3.orig/Lib/email/_parseaddr.py
+++ python3.5-3.5.3/Lib/email/_parseaddr.py
@@ -379,7 +379,12 @@ class AddrlistClass:
         aslist.append('@')
         self.pos += 1
         self.gotonext()
-        return EMPTYSTRING.join(aslist) + self.getdomain()
+        domain = self.getdomain()
+        if not domain:
+            # Invalid domain, return an empty address instead of returning a
+            # local part to denote failed parsing.
+            return EMPTYSTRING
+        return EMPTYSTRING.join(aslist) + domain
 
     def getdomain(self):
         """Get the complete domain name from an address."""
@@ -394,6 +399,10 @@ class AddrlistClass:
             elif self.field[self.pos] == '.':
                 self.pos += 1
                 sdlist.append('.')
+            elif self.field[self.pos] == '@':
+                # bpo-34155: Don't parse domains with two `@` like
+                # `a@malicious.org@important.com`.
+                return EMPTYSTRING
             elif self.field[self.pos] in self.atomends:
                 break
             else:
Index: python3.5-3.5.3/Lib/test/test_email/test__header_value_parser.py
===================================================================
--- python3.5-3.5.3.orig/Lib/test/test_email/test__header_value_parser.py
+++ python3.5-3.5.3/Lib/test/test_email/test__header_value_parser.py
@@ -1418,6 +1418,16 @@ class TestParser(TestParserMixin, TestEm
         self.assertEqual(addr_spec.domain, 'example.com')
         self.assertEqual(addr_spec.addr_spec, 'star.a.star@example.com')
 
+    def test_get_addr_spec_multiple_domains(self):
+        with self.assertRaises(errors.HeaderParseError):
+            parser.get_addr_spec('star@a.star@example.com')
+
+        with self.assertRaises(errors.HeaderParseError):
+            parser.get_addr_spec('star@a@example.com')
+
+        with self.assertRaises(errors.HeaderParseError):
+            parser.get_addr_spec('star@172.17.0.1@example.com')
+
     # get_obs_route
 
     def test_get_obs_route_simple(self):
Index: python3.5-3.5.3/Lib/test/test_email/test_email.py
===================================================================
--- python3.5-3.5.3.orig/Lib/test/test_email/test_email.py
+++ python3.5-3.5.3/Lib/test/test_email/test_email.py
@@ -3015,6 +3015,20 @@ class TestMiscellaneous(TestEmailBase):
         self.assertEqual(utils.parseaddr('<>'), ('', ''))
         self.assertEqual(utils.formataddr(utils.parseaddr('<>')), '')
 
+    def test_parseaddr_multiple_domains(self):
+        self.assertEqual(
+            utils.parseaddr('a@b@c'),
+            ('', '')
+        )
+        self.assertEqual(
+            utils.parseaddr('a@b.c@c'),
+            ('', '')
+        )
+        self.assertEqual(
+            utils.parseaddr('a@172.17.0.1@c'),
+            ('', '')
+        )
+
     def test_noquote_dump(self):
         self.assertEqual(
             utils.formataddr(('A Silly Person', 'person@dom.ain')),
Index: python3.5-3.5.3/Misc/NEWS.d/next/Security/2019-05-04-13-33-37.bpo-34155.MJll68.rst
===================================================================
--- /dev/null
+++ python3.5-3.5.3/Misc/NEWS.d/next/Security/2019-05-04-13-33-37.bpo-34155.MJll68.rst
@@ -0,0 +1 @@
+Fix parsing of invalid email addresses with more than one ``@`` (e.g. a@b@c.com.) to not return the part before 2nd ``@`` as valid email address. Patch by maxking & jpic.
