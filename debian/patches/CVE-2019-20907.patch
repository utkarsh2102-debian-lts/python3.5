Index: python3.5-3.5.3/Lib/tarfile.py
===================================================================
--- python3.5-3.5.3.orig/Lib/tarfile.py	2020-10-27 14:14:18.019008957 +0100
+++ python3.5-3.5.3/Lib/tarfile.py	2020-10-27 14:14:17.983007127 +0100
@@ -1221,6 +1221,8 @@
 
             length, keyword = match.groups()
             length = int(length)
+            if length == 0:
+                raise InvalidHeaderError("invalid header")
             value = buf[match.end(2) + 1:match.start(1) + length - 1]
 
             # Normally, we could just use "utf-8" as the encoding and "strict"
Index: python3.5-3.5.3/Lib/test/test_tarfile.py
===================================================================
--- python3.5-3.5.3.orig/Lib/test/test_tarfile.py	2020-10-27 14:14:18.019008957 +0100
+++ python3.5-3.5.3/Lib/test/test_tarfile.py	2020-10-27 14:14:17.991007534 +0100
@@ -394,6 +394,13 @@
                 with self.assertRaisesRegex(tarfile.ReadError, "unexpected end of data"):
                     tar.extractfile(t).read()
 
+    def test_length_zero_header(self):
+        # bpo-39017 (CVE-2019-20907): reading a zero-length header should fail
+        # with an exception
+        with self.assertRaisesRegex(tarfile.ReadError, "file could not be opened successfully"):
+            with tarfile.open(support.findfile('recursion.tar')) as tar:
+                pass
+
 class MiscReadTestBase(CommonReadTest):
     def requires_name_attribute(self):
         pass
Index: python3.5-3.5.3/Misc/NEWS.d/next/Library/2020-07-12-22-16-58.bpo-39017.x3Cg-9.rst
===================================================================
--- /dev/null	1970-01-01 00:00:00.000000000 +0000
+++ python3.5-3.5.3/Misc/NEWS.d/next/Library/2020-07-12-22-16-58.bpo-39017.x3Cg-9.rst	2020-10-27 14:14:18.011008550 +0100
@@ -0,0 +1 @@
+Avoid infinite loop when reading specially crafted TAR files using the tarfile module (CVE-2019-20907).
